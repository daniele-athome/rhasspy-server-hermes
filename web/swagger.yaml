openapi: "3.0.0"
info:
  title: 'Rhasspy Voice Assistant'
  version: '2.5.0'
  description: 'API for Rhasspy Voice Assistant Toolkit'
schemes:
  - http
servers:
  - url: http://localhost:12101
    description: Local development server
paths:
  /api/backup-profile:
    get:
      summary: 'Get user profile files in a zip file'
      produces:
        - application/zip
      responses:
        '200':
          description: zip file
          schema:
            type: string
            format: binary
  /api/custom-words:
    get:
      summary: 'Get custom words for profile'
      produces:
        - text/plain
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
    post:
      summary: 'Overwrite custom words for profile'
      requestBody:
        description: 'Custom words as a CMU dictionary'
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/download-profile:
    post:
      summary: 'Force Rhasspy to download files for current profile'
      parameters:
        - in: query
          name: delete
          description: 'True if download cache should be deleted'
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/evaluate:
    post:
      summary: 'Batch testing of WAV files with expected JSON intents in an archive'
      requestBody:
        description: 'Archive supported by shutil.unpack_archive'
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Report as JSON
          content:
            application/json:
              schema:
                type: object
  /api/intents:
    get:
      summary: 'Get all defined intents'
      produces:
        - application/json
      responses:
        '200':
          description: intents
          schema:
            type: object
  /api/listen-for-command:
    post:
      summary: 'Make Rhasspy listen for a command'
      produces:
        - application/json
      parameters:
        - in: query
          name: nohass
          description: 'True if intent should NOT be sent to intent handler'
          schema:
            type: boolean
            default: false
        - in: query
          name: outputFormat
          description: 'Format of response'
          schema:
            type: string
            enum: [rhasspy, hermes]
        - in: query
          name: entity
          description: 'User-defined entity to add to recognized intent'
          schema:
            type: string
        - in: query
          name: value
          description: 'Value for user-defined entity'
          schema:
            type: string
      responses:
        '200':
          description: Intent
          schema:
            type: object
  /api/listen-for-wake:
    post:
      summary: 'Enable or disable wake word system'
      produces:
        - text/plain
      parameters:
        - in: query
          name: siteId
          description: 'Hermes siteId (default: local siteId)'
          schema:
            type: string
      requestBody:
        description: 'Enable or disable'
        required: true
        content:
          text/plain:
            schema:
              type: string
              enum: ['on', 'off']
      responses:
        '200':
          description: 'State of wake word system: on or off'
          schema:
            type: string
  /api/lookup:
    post:
      summary: 'Look up a word in the dictionary or guess pronunciation'
      produces:
        - application/json
      requestBody:
        description: 'Word to look up'
        required: true
        content:
          text/plain:
            schema:
              type: string
      parameters:
        - in: query
          name: n
          description: 'Number of pronunciations to generate'
          schema:
            type: integer
            default: 5
      responses:
        '200':
          description: 'Word pronunciation JSON'
          content:
            application/json:
              schema:
                type: object
  /api/microphones:
    get:
      summary: 'Get list of available microphones'
      produces:
        - application/json
      responses:
        '200':
          description: 'Available microphone names, descriptions'
          schema:
            type: object
  /api/phonemes:
    get:
      summary: 'Get examples of phonemes for a profile'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /api/play-recording:
    get:
      summary: 'Download WAV data from last recorded voice command'
      responses:
        '200':
          description: WAV data
          content:
            audio/wav:
              schema:
                type: string
                format: binary
    post:
      summary: 'Play last recorded voice command'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/play-wav:
    post:
      summary: 'Play WAV data using configured audio output'
      requestBody:
        description: 'WAV data or URL'
        required: true
        content:
          audio/wav:
            schema:
              type: string
              format: binary
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/profiles:
    get:
      summary: 'Get available profiles and missing files'
      produces:
        - application/json
      responses:
        '200':
          description: Available profiles and missing files
          schema:
            type: object
  /api/profile:
    get:
      summary: 'Get profile settings'
      produces:
        - application/json
      parameters:
        - in: query
          name: layers
          description: ''
          schema:
            type: string
            enum: [all, defaults, profile]
      responses:
        '200':
          description: 'Profile settings'
          schema:
            type: object
    post:
      summary: 'Overwrite profile settings'
      produces:
        - application/json
      requestBody:
        description: 'JSON to write to profile'
        required: true
        content:
          application/json:
            schema:
              type: object
      parameters:
        - in: query
          name: layers
          description: ''
          schema:
            type: string
            enum: [default, profile]
      responses:
        '200':
          description: OK
          schema:
            type: object
  /api/pronounce:
    post:
      summary: 'Pronounce a word or set of phonemes'
      produces:
        - text/plain
        - audio/wav
      requestBody:
        description: 'Word of phonemes to pronounce'
        required: true
        content:
          text/plain:
            schema:
              type: string
      parameters:
        - in: query
          name: download
          description: 'Return WAV file instead of using speakers'
          schema:
            type: boolean
            default: false
        - in: query
          name: voice
          description: 'Voice/language to use (defaults to profile language)'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            audio/wav:
              schema:
                type: string
                format: binary
  /api/sentences:
    get:
      summary: 'Get example sentences for profile'
      produces:
        - text/plain
        - application/json
      responses:
        '200':
          description: 'Sentences as text or JSON'
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: object
    post:
      summary: 'Overwrite example sentences for profile'
      requestBody:
        description: 'Example sentences in text or JSON format'
        required: true
        content:
          text/plain:
            schema:
              type: string
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/set-volume:
    post:
      summary: 'Set volume for one or more sites'
      requestBody:
        description: 'Volume scale (0 = off, 1 = full volume)'
        required: true
        content:
          text/plain:
            schema:
              type: string
      parameters:
        - in: query
          name: siteId
          description: 'Hermes site id(s) (comma-separated)'
          schema:
            type: string
      responses:
        '200':
          description: Volume
          content:
            text/plain:
              type: string
  /api/speakers:
    get:
      summary: 'Get list of available speakers'
      produces:
        - application/json
      responses:
        '200':
          description: 'Available speakers names, descriptions'
          content:
            application/json:
              schema:
                type: object
  /api/test-microphones:
    get:
      summary: 'Get list of available microphones and if they are working'
      produces:
        - application/json
      responses:
        '200':
          description: 'Available microphone names, descriptions'
          content:
            application/json:
              schema:
                type: object
  /api/restart:
    post:
      summary: 'Restart the Rhasspy server'
      parameters:
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/slots:
    get:
      summary: 'Get all slot values'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: object
    post:
      summary: 'Add to or overwrite slot values'
      requestBody:
        description: 'JSON with slot names and value lists'
        required: true
        content:
          application/json:
            schema:
              type: object
      parameters:
        - in: query
          name: overwriteAll
          description: 'True if slots in JSON should be overwritten'
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: 'Slots JSON'
          content:
            application/json:
              schema:
                type: object
  /api/start-recording:
    post:
      summary: 'Record WAV file from microphone until stopped with /api/stop-recording'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/stop-recording:
    post:
      summary: 'Stop recording WAV file, transcribe, extract intent, and send to intent handler'
      parameters:
        - in: query
          name: nohass
          description: 'True if intent should NOT be sent to the intent handler'
          schema:
            type: boolean
            default: false
        - in: query
          name: outputFormat
          description: 'Format of response'
          schema:
            type: string
            enum: [rhasspy, hermes]
        - in: query
          name: entity
          description: 'User-defined entity to add to recognized intent'
          schema:
            type: string
        - in: query
          name: value
          description: 'Value for user-defined entity'
          schema:
            type: string
      responses:
        '200':
          description: 'Intent JSON'
          content:
            application/json:
              schema:
                type: object
  /api/speech-to-intent:
    post:
      summary: 'Transcribe WAV data, extract intent, and send to intent handler'
      requestBody:
        description: 'WAV data (16-bit 16Khz mono preferred)'
        required: true
        content:
          audio/wav:
            schema:
              type: string
              format: binary
      parameters:
        - in: query
          name: nohass
          description: 'True if intent should NOT be sent to the intent handler'
          schema:
            type: boolean
            default: false
        - in: query
          name: outputFormat
          description: 'Format of response'
          schema:
            type: string
            enum: [rhasspy, hermes]
        - in: query
          name: entity
          description: 'User-defined entity to add to recognized intent'
          schema:
            type: string
        - in: query
          name: value
          description: 'Value for user-defined entity'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /api/speech-to-text:
    post:
      summary: 'Transcribe WAV data to text'
      requestBody:
        description: 'WAV data (16-bit 16Khz mono preferred)'
        required: true
        content:
          audio/wav:
            schema:
              type: string
              format: binary
      parameters:
        - in: query
          name: outputFormat
          description: 'Format of response'
          schema:
            type: string
            enum: [rhasspy, hermes]
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: object
  /api/text-to-intent:
    post:
      summary: 'Extract intent from text and send to intent handler'
      requestBody:
        description: 'Text command'
        required: true
        content:
          text/plain:
            schema:
              type: string
      parameters:
        - in: query
          name: nohass
          description: 'True if intent should NOT be sent to the intent handler'
          schema:
            type: boolean
            default: false
        - in: query
          name: outputFormat
          description: 'Format of response'
          schema:
            type: string
            enum: [rhasspy, hermes]
        - in: query
          name: entity
          description: 'User-defined entity to add to recognized intent'
          schema:
            type: string
        - in: query
          name: value
          description: 'Value for user-defined entity'
          schema:
            type: string
        - in: query
          name: intentFilter
          description: 'Comma-separated list of intent names'
          schema:
            type: string
      responses:
        '200':
          description: 'Intent JSON'
          content:
            application/json:
              schema:
                type: object
  /api/text-to-speech:
    post:
      summary: 'Speak a message using configured text to speech system'
      requestBody:
        description: 'Text to speak'
        required: true
        content:
          text/plain:
            schema:
              type: string
      parameters:
        - in: query
          name: language
          description: 'Override default language'
          schema:
            type: string
        - in: query
          name: play
          description: 'If true, output audio (default)'
          schema:
            type: boolean
            default: true
        - in: query
          name: repeat
          description: 'True if Rhasspy should repeat the last spoken sentence'
          schema:
            type: boolean
            default: false
        - in: query
          name: voice
          description: 'Override default voice'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            audio/wav:
              schema:
                type: string
                format: binary
  /api/train:
    post:
      summary: 'Re-train speech/intent recognizers for profile'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/unknown-words:
    get:
      summary: 'Get unknown words for profile'
      produces:
        - application/json
      responses:
        '200':
          description: 'Unknown words as a pronunciation dictionary'
          content:
            application/json:
              schema:
                type: object
  /api/version:
    get:
      summary: 'Get Rhasspy version'
      produces:
        - text/plain
      responses:
        '200':
          description: 'Version string'
          schema:
            type: string
